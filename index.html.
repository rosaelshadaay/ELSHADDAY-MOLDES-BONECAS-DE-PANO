<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Moldes de Roupas para Bonecas 60cm</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8fafc;
        }
        .spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            width: 36px;
            height: 36px;
            border-radius: 50%;
            border-left-color: #fff;
            animation: spin 1s ease infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .message-box {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #fff;
            padding: 2rem;
            border-radius: 0.75rem;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            text-align: center;
            z-index: 1000;
        }
        .hidden {
            display: none;
        }
    </style>
</head>
<body class="bg-gray-50 text-gray-800">

    <div class="container mx-auto p-4 sm:p-8">
        <header class="text-center my-8 sm:my-12">
            <h1 class="text-4xl sm:text-5xl font-extrabold text-pink-600 mb-2">Moldes para Bonecas de 60cm</h1>
            <p class="text-lg sm:text-xl text-gray-600">
                Explore a nossa coleção de moldes exclusivos para criar as roupas mais lindas e estilosas.
            </p>
        </header>

        <main class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 sm:gap-8">
            <!-- Molde de Vestido de Verão -->
            <div class="bg-white rounded-xl shadow-lg overflow-hidden transition-transform transform hover:scale-105">
                <div class="relative w-full h-64 sm:h-72">
                    <img src="https://placehold.co/600x400/FFC0CB/FFF?text=Vestido+de+Verão" alt="Vestido de Verão para Boneca" class="w-full h-full object-cover">
                </div>
                <div class="p-4 sm:p-6">
                    <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-2">Vestido de Verão</h2>
                    <p class="text-gray-600 mb-4 text-sm sm:text-base">
                        Um vestido leve e elegante, perfeito para dias ensolarados. Fácil de costurar, ideal para iniciantes.
                    </p>
                    <a href="#" class="w-full inline-block text-center bg-pink-500 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:bg-pink-600 transition-colors duration-300 download-link" data-molde-url="https://www.exemplo.com/molde_vestido.pdf">
                        Baixar Molde
                    </a>
                </div>
            </div>

            <!-- Molde de Blusa e Calça -->
            <div class="bg-white rounded-xl shadow-lg overflow-hidden transition-transform transform hover:scale-105">
                <div class="relative w-full h-64 sm:h-72">
                    <img src="https://placehold.co/600x400/90EE90/000?text=Blusa+e+Calça" alt="Conjunto de Blusa e Calça" class="w-full h-full object-cover">
                </div>
                <div class="p-4 sm:p-6">
                    <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-2">Blusa e Calça</h2>
                    <p class="text-gray-600 mb-4 text-sm sm:text-base">
                        Um conjunto casual e moderno. Ideal para criar looks versáteis e cheios de estilo.
                    </p>
                    <a href="#" class="w-full inline-block text-center bg-pink-500 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:bg-pink-600 transition-colors duration-300 download-link" data-molde-url="https://www.exemplo.com/molde_blusa_calca.pdf">
                        Baixar Molde
                    </a>
                </div>
            </div>

            <!-- Molde de Casaco de Inverno -->
            <div class="bg-white rounded-xl shadow-lg overflow-hidden transition-transform transform hover:scale-105">
                <div class="relative w-full h-64 sm:h-72">
                    <img src="https://placehold.co/600x400/ADD8E6/000?text=Casaco+de+Inverno" alt="Casaco de Inverno para Boneca" class="w-full h-full object-cover">
                </div>
                <div class="p-4 sm:p-6">
                    <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-2">Casaco de Inverno</h2>
                    <p class="text-gray-600 mb-4 text-sm sm:text-base">
                        Um casaco fofo e quente para os dias mais frios. Perfeito para usar a criatividade com diferentes tecidos.
                    </p>
                    <a href="#" class="w-full inline-block text-center bg-pink-500 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:bg-pink-600 transition-colors duration-300 download-link" data-molde-url="https://www.exemplo.com/molde_casaco.pdf">
                        Baixar Molde
                    </a>
                </div>
            </div>
        </main>
        
        <!-- Seção da API do Gemini -->
        <section class="mt-12 p-6 bg-white rounded-xl shadow-lg">
            <h2 class="text-2xl sm:text-3xl font-bold text-pink-600 mb-4 text-center">Precisa de Inspiração? ✨</h2>
            <p class="text-center text-gray-600 mb-6">
                Use a nossa ferramenta de IA para gerar ideias de roupas únicas para as suas bonecas.
            </p>

            <div class="max-w-xl mx-auto">
                <div class="flex flex-col sm:flex-row gap-4 mb-4">
                    <input type="text" id="boneca-tamanho" placeholder="Tamanho da boneca (ex: 60cm)" class="flex-1 p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-pink-500">
                    <input type="text" id="estilo-roupa" placeholder="Estilo de roupa (ex: casual, elegante)" class="flex-1 p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-pink-500">
                </div>
                <div class="flex flex-col sm:flex-row gap-4">
                    <button id="gerar-ideia-btn" class="flex-1 w-full bg-pink-500 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:bg-pink-600 transition-colors duration-300 flex items-center justify-center">
                        <span id="btn-text">Gerar Ideia ✨</span>
                        <div id="loading-spinner" class="spinner hidden"></div>
                    </button>
                    <button id="limpar-btn" class="flex-1 w-full bg-gray-300 text-gray-800 font-semibold py-3 px-6 rounded-lg shadow-md hover:bg-gray-400 transition-colors duration-300">
                        Limpar
                    </button>
                </div>
            </div>

            <div id="ideia-output" class="mt-8 p-6 bg-gray-100 rounded-lg hidden">
                <h3 class="font-bold text-xl mb-2 text-gray-900">A sua ideia de roupa é:</h3>
                <p id="ideia-texto" class="text-gray-700 whitespace-pre-wrap"></p>
            </div>
        </section>

        <!-- Nova secção: Assistente de Costura -->
        <section class="mt-12 p-6 bg-white rounded-xl shadow-lg">
            <h2 class="text-2xl sm:text-3xl font-bold text-pink-600 mb-4 text-center">Assistente de Costura ✨</h2>
            <p class="text-center text-gray-600 mb-6">
                Descreva a peça de roupa que quer costurar e receba instruções passo a passo.
            </p>
            <div class="max-w-xl mx-auto">
                <textarea id="costura-input" rows="4" placeholder="Ex: Vestido de Verão para boneca de 60cm com manga bufante e saia rodada." class="w-full p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-pink-500 mb-4"></textarea>
                <div class="flex flex-col sm:flex-row gap-4">
                    <button id="gerar-costura-btn" class="flex-1 w-full bg-pink-500 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:bg-pink-600 transition-colors duration-300 flex items-center justify-center">
                        <span id="costura-btn-text">Gerar Instruções</span>
                        <div id="costura-spinner" class="spinner hidden"></div>
                    </button>
                    <button id="play-audio-btn" class="flex-1 w-full bg-blue-500 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:bg-blue-600 transition-colors duration-300 flex items-center justify-center">
                        <span id="audio-btn-text">Ouvir Instruções</span>
                        <div id="audio-spinner" class="spinner hidden"></div>
                    </button>
                </div>
            </div>

            <div id="costura-output" class="mt-8 p-6 bg-gray-100 rounded-lg hidden">
                <h3 class="font-bold text-xl mb-2 text-gray-900">Instruções de Costura:</h3>
                <p id="costura-texto" class="text-gray-700 whitespace-pre-wrap"></p>
            </div>
        </section>

        <!-- Mensagem de Download -->
        <div id="download-message" class="fixed bottom-4 right-4 bg-green-500 text-white py-3 px-6 rounded-lg shadow-xl hidden transition-all duration-500 transform translate-x-full">
            <p class="font-bold">O download foi iniciado!</p>
        </div>

        <!-- Mensagem de erro/sucesso -->
        <div id="message-box" class="message-box hidden">
            <p id="message-text" class="text-gray-800 font-semibold"></p>
            <button id="message-ok-btn" class="mt-4 bg-pink-500 text-white font-semibold py-2 px-4 rounded-lg hover:bg-pink-600">OK</button>
        </div>

    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const downloadLinks = document.querySelectorAll('.download-link');
            const downloadMessage = document.getElementById('download-message');
            const gerarIdeiaBtn = document.getElementById('gerar-ideia-btn');
            const limparBtn = document.getElementById('limpar-btn');
            const bonecaTamanhoInput = document.getElementById('boneca-tamanho');
            const estiloRoupaInput = document.getElementById('estilo-roupa');
            const ideiaOutput = document.getElementById('ideia-output');
            const ideiaTexto = document.getElementById('ideia-texto');
            const loadingSpinner = document.getElementById('loading-spinner');
            const btnText = document.getElementById('btn-text');
            const costuraInput = document.getElementById('costura-input');
            const gerarCosturaBtn = document.getElementById('gerar-costura-btn');
            const playAudioBtn = document.getElementById('play-audio-btn');
            const costuraOutput = document.getElementById('costura-output');
            const costuraTexto = document.getElementById('costura-texto');
            const costuraSpinner = document.getElementById('costura-spinner');
            const costuraBtnText = document.getElementById('costura-btn-text');
            const audioSpinner = document.getElementById('audio-spinner');
            const audioBtnText = document.getElementById('audio-btn-text');
            const messageBox = document.getElementById('message-box');
            const messageText = document.getElementById('message-text');
            const messageOkBtn = document.getElementById('message-ok-btn');

            // Exibir mensagens personalizadas em vez de alert()
            function showMessage(text) {
                messageText.textContent = text;
                messageBox.classList.remove('hidden');
            }

            messageOkBtn.addEventListener('click', () => {
                messageBox.classList.add('hidden');
            });

            // Lógica de download
            downloadLinks.forEach(link => {
                link.addEventListener('click', (event) => {
                    event.preventDefault(); 
                    const url = link.getAttribute('data-molde-url');
                    window.open(url, '_blank');
                    downloadMessage.classList.remove('hidden', 'translate-x-full');
                    downloadMessage.classList.add('translate-x-0');
                    setTimeout(() => {
                        downloadMessage.classList.remove('translate-x-0');
                        downloadMessage.classList.add('translate-x-full');
                    }, 3000);
                });
            });

            // Lógica para a API de geração de ideias
            gerarIdeiaBtn.addEventListener('click', async () => {
                const tamanho = bonecaTamanhoInput.value;
                const estilo = estiloRoupaInput.value;
                
                if (!tamanho && !estilo) {
                    showMessage('Por favor, preencha pelo menos um campo para gerar uma ideia.');
                    return;
                }

                ideiaOutput.classList.add('hidden');
                loadingSpinner.classList.remove('hidden');
                btnText.classList.add('hidden');
                gerarIdeiaBtn.disabled = true;

                const userQuery = `Gera uma ideia de roupa para uma boneca com as seguintes características:
                Tamanho: ${tamanho || 'não especificado'}
                Estilo: ${estilo || 'não especificado'}

                Inclui os seguintes pontos na tua resposta:
                1. O nome da roupa (ex: Vestido de Verão Tropical).
                2. Uma descrição detalhada do design (tecidos, cores, detalhes).
                3. Sugestões de moldes para criar a peça (ex: molde de vestido simples, molde de manga bufante).
                A tua resposta deve ser criativa e detalhada, com informações úteis para costureiros.`;

                try {
                    const apiKey = "";
                    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
                    
                    const payload = {
                        contents: [{ parts: [{ text: userQuery }] }],
                        tools: [{ "google_search": {} }],
                        systemInstruction: {
                            parts: [{ text: "Atua como um designer de moda especializado em roupas para bonecas. A tua tarefa é criar ideias de roupa criativas e detalhadas, com dicas práticas para costura." }]
                        },
                    };
                    
                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });
                    
                    const result = await response.json();
                    const text = result.candidates?.[0]?.content?.parts?.[0]?.text || 'Não foi possível gerar uma ideia. Por favor, tente novamente.';
                    
                    ideiaTexto.textContent = text;
                    ideiaOutput.classList.remove('hidden');

                } catch (error) {
                    console.error('Erro ao gerar ideia:', error);
                    showMessage('Ocorreu um erro ao gerar a ideia. Por favor, tente novamente.');
                    ideiaOutput.classList.remove('hidden');
                } finally {
                    loadingSpinner.classList.add('hidden');
                    btnText.classList.remove('hidden');
                    gerarIdeiaBtn.disabled = false;
                }
            });

            limparBtn.addEventListener('click', () => {
                bonecaTamanhoInput.value = '';
                estiloRoupaInput.value = '';
                ideiaOutput.classList.add('hidden');
                ideiaTexto.textContent = '';
            });

            // Lógica para a API de geração de instruções de costura
            gerarCosturaBtn.addEventListener('click', async () => {
                const descricao = costuraInput.value;
                if (!descricao) {
                    showMessage('Por favor, descreva a peça de roupa para gerar as instruções.');
                    return;
                }

                costuraOutput.classList.add('hidden');
                costuraSpinner.classList.remove('hidden');
                costuraBtnText.classList.add('hidden');
                gerarCosturaBtn.disabled = true;
                playAudioBtn.disabled = true;

                const userQuery = `Gera um conjunto de instruções simples e passo a passo sobre como costurar a seguinte peça de roupa: ${descricao}. Foca-te em técnicas básicas e na ordem correta dos passos.`;

                try {
                    const apiKey = "";
                    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
                    
                    const payload = {
                        contents: [{ parts: [{ text: userQuery }] }],
                        systemInstruction: {
                            parts: [{ text: "Atua como um especialista em costura, fornecendo instruções claras e concisas para iniciantes. Usa uma linguagem simples e direta." }]
                        },
                    };
                    
                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });
                    
                    const result = await response.json();
                    const text = result.candidates?.[0]?.content?.parts?.[0]?.text || 'Não foi possível gerar as instruções. Por favor, tente novamente.';
                    
                    costuraTexto.textContent = text;
                    costuraOutput.classList.remove('hidden');
                } catch (error) {
                    console.error('Erro ao gerar instruções:', error);
                    showMessage('Ocorreu um erro ao gerar as instruções. Por favor, tente novamente.');
                    costuraOutput.classList.add('hidden');
                } finally {
                    costuraSpinner.classList.add('hidden');
                    costuraBtnText.classList.remove('hidden');
                    gerarCosturaBtn.disabled = false;
                    playAudioBtn.disabled = false;
                }
            });

            // Lógica para a API de Texto para Voz
            playAudioBtn.addEventListener('click', async () => {
                const textToSpeak = costuraTexto.textContent;
                if (!textToSpeak) {
                    showMessage('Não há instruções para ouvir. Por favor, gere as instruções primeiro.');
                    return;
                }

                audioSpinner.classList.remove('hidden');
                audioBtnText.classList.add('hidden');
                playAudioBtn.disabled = true;

                const audioContext = new (window.AudioContext || window.webkitAudioContext)();

                // Helper function to decode base64 to ArrayBuffer
                const base64ToArrayBuffer = (base64) => {
                    const binaryString = atob(base64);
                    const len = binaryString.length;
                    const bytes = new Uint8Array(len);
                    for (let i = 0; i < len; i++) {
                        bytes[i] = binaryString.charCodeAt(i);
                    }
                    return bytes.buffer;
                };

                // Helper function to convert raw PCM to WAV format
                const pcmToWav = (pcmData, sampleRate) => {
                    const pcm16 = new Int16Array(pcmData);
                    const buffer = new ArrayBuffer(44 + pcm16.length * 2);
                    const view = new DataView(buffer);

                    // WAV header
                    // RIFF identifier
                    writeString(view, 0, 'RIFF');
                    // file length
                    view.setUint32(4, 36 + pcm16.length * 2, true);
                    // RIFF type
                    writeString(view, 8, 'WAVE');
                    // format chunk identifier
                    writeString(view, 12, 'fmt ');
                    // format chunk length
                    view.setUint32(16, 16, true);
                    // sample format (raw)
                    view.setUint16(20, 1, true);
                    // channel count
                    view.setUint16(22, 1, true);
                    // sample rate
                    view.setUint32(24, sampleRate, true);
                    // byte rate (sample rate * block align)
                    view.setUint32(28, sampleRate * 2, true);
                    // block align (channels * bytes per sample)
                    view.setUint16(32, 2, true);
                    // bits per sample
                    view.setUint16(34, 16, true);
                    // data chunk identifier
                    writeString(view, 36, 'data');
                    // data chunk length
                    view.setUint32(40, pcm16.length * 2, true);
                    
                    // Write the PCM data
                    for (let i = 0; i < pcm16.length; i++) {
                        view.setInt16(44 + i * 2, pcm16[i], true);
                    }
                    
                    return new Blob([view], { type: 'audio/wav' });
                };

                const writeString = (view, offset, string) => {
                    for (let i = 0; i < string.length; i++) {
                        view.setUint8(offset + i, string.charCodeAt(i));
                    }
                };

                try {
                    const payload = {
                        contents: [{
                            parts: [{ text: textToSpeak }]
                        }],
                        generationConfig: {
                            responseModalities: ["AUDIO"],
                            speechConfig: {
                                voiceConfig: {
                                    prebuiltVoiceConfig: { voiceName: "Puck" }
                                }
                            }
                        },
                        model: "gemini-2.5-flash-preview-tts"
                    };

                    const apiKey = "";
                    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent?key=${apiKey}`;

                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    const result = await response.json();
                    const part = result?.candidates?.[0]?.content?.parts?.[0];
                    const audioData = part?.inlineData?.data;
                    const mimeType = part?.inlineData?.mimeType;

                    if (audioData && mimeType && mimeType.startsWith("audio/")) {
                        const sampleRateMatch = mimeType.match(/rate=(\d+)/);
                        const sampleRate = sampleRateMatch ? parseInt(sampleRateMatch[1], 10) : 16000;
                        const pcmData = base64ToArrayBuffer(audioData);
                        const wavBlob = pcmToWav(pcmData, sampleRate);
                        const audioUrl = URL.createObjectURL(wavBlob);
                        
                        const audio = new Audio(audioUrl);
                        audio.play();

                        audio.addEventListener('ended', () => {
                            URL.revokeObjectURL(audioUrl);
                        });

                        showMessage('A reprodução do áudio foi iniciada.');
                    } else {
                        showMessage('Não foi possível gerar o áudio. Por favor, tente novamente.');
                    }

                } catch (error) {
                    console.error('Erro ao gerar áudio:', error);
                    showMessage('Ocorreu um erro ao gerar o áudio. Por favor, tente novamente.');
                } finally {
                    audioSpinner.classList.add('hidden');
                    audioBtnText.classList.remove('hidden');
                    playAudioBtn.disabled = false;
                }
            });
        });
    </script>
</body>
</html>

